@model NativeCodeTest.ViewModels.ProductCategoryViewModel

@{
    ViewBag.Title = "Product Assing Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<br />
<br />

<h3>@ViewBag.Title</h3>

<!-- Displaying the message -->
@{ Html.RenderPartial("_ShowMessage"); }

<!-- This from will allow the user user to edit the name and price-->
<div class="form-horizontal">
    @using (Html.BeginForm("EditProductCateogry", "ProductAssign", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <input type="hidden" name="productID" value="@Model.Product.Id" />

        <!-- Edit the product -->
        <div class="form-group">
            @Html.LabelFor(model => model.Product.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.ProductCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.ProductCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Edit the price -->
        <div class="form-group">
            @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2">
                <label>Category</label>
            </div>
            <div class="col-md-10">
                <select class="form-control" id="categoryId" name="categoryId" >
                    <option>-- Select --</option>
                    @foreach (var category in Model.CategoryList)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="btn btn-default" />
            </div>
        </div>
    }

    <!-- Creating a back button -->
    <a href='@Url.Action("Products", "Home")'>Back</a>
</div>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>

    // Selecting the Index by its ID when the page is loaded. This will work with the current model. 
    $( document ).ready(function() {
        document.getElementById("categoryId").selectedIndex = '@Model.CategoryId';
});
    
</script>